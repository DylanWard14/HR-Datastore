// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StaffMember {
  id                  Int                   @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String                @unique
  mobileNumber        String
  // A staff member has an employee level
  level               Level                 @relation(fields: [levelId], references: [id])
  levelId             Int
  // A staff member is assigned an office
  office              Office                @relation(fields: [officeId], references: [id])
  officeId            Int
  // A staff member is assigned a position, only one staff member can be assigned that position
  position            Position              @relation(fields: [positionId], references: [id])
  positionId          Int                   @unique
  // A staff member has multiple skills
  skills StaffMemberOnSkills[]
}

model Level {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  StaffMembers StaffMember[]
}

model Team {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  level     Int
  Positions Position[]
}

model JobTitle {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  Positions   Position[]
}

model Position {
  id          Int          @id @default(autoincrement())
  // A Position has a job title
  jobTitle    JobTitle     @relation(fields: [jobTitleId], references: [id])
  jobTitleId  Int
  // A Position is assigned to a team
  team        Team         @relation(fields: [teamId], references: [id])
  teamId      Int
  StaffMember StaffMember?
}

model Office {
  id           Int           @id @default(autoincrement())
  addressLine1 String
  addressLine2 String?
  addressLine3 String?
  postCode     Int
  state        State
  StaffMembers StaffMember[]
}

enum State {
  QLD
  NSW
  VIC
  ACT
  TAS
  NT
  WA
}

model Skill {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  // A skill can be assigned to multiple staff members
  staffMembers StaffMemberOnSkills[]
}

model StaffMemberOnSkills {
  staffMember   StaffMember @relation(fields: [staffMemberId], references: [id])
  staffMemberId Int // relation scalar field (used in the `@relation` attribute above)
  skill         Skill       @relation(fields: [skillId], references: [id])
  skillId       Int // relation scalar field (used in the `@relation` attribute above)

  @@id([staffMemberId, skillId])
}
